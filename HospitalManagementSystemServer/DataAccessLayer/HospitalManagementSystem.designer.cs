#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HospitalManagementSystem")]
	public partial class HospitalManagementSystemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdministrator(Administrator instance);
    partial void UpdateAdministrator(Administrator instance);
    partial void DeleteAdministrator(Administrator instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertNurse(Nurse instance);
    partial void UpdateNurse(Nurse instance);
    partial void DeleteNurse(Nurse instance);
    partial void InsertLabIncharge(LabIncharge instance);
    partial void UpdateLabIncharge(LabIncharge instance);
    partial void DeleteLabIncharge(LabIncharge instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertTreatment(Treatment instance);
    partial void UpdateTreatment(Treatment instance);
    partial void DeleteTreatment(Treatment instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertTreatment_Room(Treatment_Room instance);
    partial void UpdateTreatment_Room(Treatment_Room instance);
    partial void DeleteTreatment_Room(Treatment_Room instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertTreatmentRoom_Record(TreatmentRoom_Record instance);
    partial void UpdateTreatmentRoom_Record(TreatmentRoom_Record instance);
    partial void DeleteTreatmentRoom_Record(TreatmentRoom_Record instance);
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    #endregion
		
		public HospitalManagementSystemDataContext() : 
				base(global::DataAccessLayer.Properties.Settings.Default.HospitalManagementSystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalManagementSystemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalManagementSystemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalManagementSystemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalManagementSystemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Administrator> Administrators
		{
			get
			{
				return this.GetTable<Administrator>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Nurse> Nurses
		{
			get
			{
				return this.GetTable<Nurse>();
			}
		}
		
		public System.Data.Linq.Table<LabIncharge> LabIncharges
		{
			get
			{
				return this.GetTable<LabIncharge>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<Treatment> Treatments
		{
			get
			{
				return this.GetTable<Treatment>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<Treatment_Room> Treatment_Rooms
		{
			get
			{
				return this.GetTable<Treatment_Room>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<TreatmentRoom_Record> TreatmentRoom_Records
		{
			get
			{
				return this.GetTable<TreatmentRoom_Record>();
			}
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Administrator")]
	public partial class Administrator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Admin_ID;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _Email_ID;
		
		private string _Password;
		
		private string _Gender;
		
		private System.DateTime _DateOfBirth;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Security_Question;
		
		private string _Security_Answer;
		
		private bool _IsActive;
		
		private EntitySet<Notification> _Notifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdmin_IDChanging(int value);
    partial void OnAdmin_IDChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnEmail_IDChanging(string value);
    partial void OnEmail_IDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSecurity_QuestionChanging(string value);
    partial void OnSecurity_QuestionChanged();
    partial void OnSecurity_AnswerChanging(string value);
    partial void OnSecurity_AnswerChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Administrator()
		{
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Admin_ID
		{
			get
			{
				return this._Admin_ID;
			}
			set
			{
				if ((this._Admin_ID != value))
				{
					this.OnAdmin_IDChanging(value);
					this.SendPropertyChanging();
					this._Admin_ID = value;
					this.SendPropertyChanged("Admin_ID");
					this.OnAdmin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email_ID
		{
			get
			{
				return this._Email_ID;
			}
			set
			{
				if ((this._Email_ID != value))
				{
					this.OnEmail_IDChanging(value);
					this.SendPropertyChanging();
					this._Email_ID = value;
					this.SendPropertyChanged("Email_ID");
					this.OnEmail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Question", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Security_Question
		{
			get
			{
				return this._Security_Question;
			}
			set
			{
				if ((this._Security_Question != value))
				{
					this.OnSecurity_QuestionChanging(value);
					this.SendPropertyChanging();
					this._Security_Question = value;
					this.SendPropertyChanged("Security_Question");
					this.OnSecurity_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Answer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Security_Answer
		{
			get
			{
				return this._Security_Answer;
			}
			set
			{
				if ((this._Security_Answer != value))
				{
					this.OnSecurity_AnswerChanging(value);
					this.SendPropertyChanging();
					this._Security_Answer = value;
					this.SendPropertyChanged("Security_Answer");
					this.OnSecurity_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Administrator_Notification", Storage="_Notifications", ThisKey="Admin_ID", OtherKey="Admin_ID")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Administrator = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Administrator = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Doctor_ID;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _Department;
		
		private string _Designation;
		
		private string _Email_ID;
		
		private string _Password;
		
		private string _Gender;
		
		private System.DateTime _DateOfBirth;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Security_Question;
		
		private string _Security_Answer;
		
		private bool _IsActive;
		
		private EntitySet<Treatment> _Treatments;
		
		private EntitySet<Appointment> _Appointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctor_IDChanging(int value);
    partial void OnDoctor_IDChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnDesignationChanging(string value);
    partial void OnDesignationChanged();
    partial void OnEmail_IDChanging(string value);
    partial void OnEmail_IDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSecurity_QuestionChanging(string value);
    partial void OnSecurity_QuestionChanged();
    partial void OnSecurity_AnswerChanging(string value);
    partial void OnSecurity_AnswerChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Doctor()
		{
			this._Treatments = new EntitySet<Treatment>(new Action<Treatment>(this.attach_Treatments), new Action<Treatment>(this.detach_Treatments));
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Doctor_ID
		{
			get
			{
				return this._Doctor_ID;
			}
			set
			{
				if ((this._Doctor_ID != value))
				{
					this.OnDoctor_IDChanging(value);
					this.SendPropertyChanging();
					this._Doctor_ID = value;
					this.SendPropertyChanged("Doctor_ID");
					this.OnDoctor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Designation
		{
			get
			{
				return this._Designation;
			}
			set
			{
				if ((this._Designation != value))
				{
					this.OnDesignationChanging(value);
					this.SendPropertyChanging();
					this._Designation = value;
					this.SendPropertyChanged("Designation");
					this.OnDesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email_ID
		{
			get
			{
				return this._Email_ID;
			}
			set
			{
				if ((this._Email_ID != value))
				{
					this.OnEmail_IDChanging(value);
					this.SendPropertyChanging();
					this._Email_ID = value;
					this.SendPropertyChanged("Email_ID");
					this.OnEmail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Question", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Security_Question
		{
			get
			{
				return this._Security_Question;
			}
			set
			{
				if ((this._Security_Question != value))
				{
					this.OnSecurity_QuestionChanging(value);
					this.SendPropertyChanging();
					this._Security_Question = value;
					this.SendPropertyChanged("Security_Question");
					this.OnSecurity_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Answer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Security_Answer
		{
			get
			{
				return this._Security_Answer;
			}
			set
			{
				if ((this._Security_Answer != value))
				{
					this.OnSecurity_AnswerChanging(value);
					this.SendPropertyChanging();
					this._Security_Answer = value;
					this.SendPropertyChanged("Security_Answer");
					this.OnSecurity_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Treatment", Storage="_Treatments", ThisKey="Doctor_ID", OtherKey="Doctor_ID")]
		public EntitySet<Treatment> Treatments
		{
			get
			{
				return this._Treatments;
			}
			set
			{
				this._Treatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Appointment", Storage="_Appointments", ThisKey="Doctor_ID", OtherKey="Doctor_ID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nurse")]
	public partial class Nurse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Nurse_ID;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _Email_ID;
		
		private string _Password;
		
		private string _Gender;
		
		private System.DateTime _DateOfBirth;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Security_Question;
		
		private string _Security_Answer;
		
		private bool _IsActive;
		
		private EntitySet<Treatment> _Treatments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNurse_IDChanging(int value);
    partial void OnNurse_IDChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnEmail_IDChanging(string value);
    partial void OnEmail_IDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSecurity_QuestionChanging(string value);
    partial void OnSecurity_QuestionChanged();
    partial void OnSecurity_AnswerChanging(string value);
    partial void OnSecurity_AnswerChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Nurse()
		{
			this._Treatments = new EntitySet<Treatment>(new Action<Treatment>(this.attach_Treatments), new Action<Treatment>(this.detach_Treatments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nurse_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Nurse_ID
		{
			get
			{
				return this._Nurse_ID;
			}
			set
			{
				if ((this._Nurse_ID != value))
				{
					this.OnNurse_IDChanging(value);
					this.SendPropertyChanging();
					this._Nurse_ID = value;
					this.SendPropertyChanged("Nurse_ID");
					this.OnNurse_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email_ID
		{
			get
			{
				return this._Email_ID;
			}
			set
			{
				if ((this._Email_ID != value))
				{
					this.OnEmail_IDChanging(value);
					this.SendPropertyChanging();
					this._Email_ID = value;
					this.SendPropertyChanged("Email_ID");
					this.OnEmail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Question", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Security_Question
		{
			get
			{
				return this._Security_Question;
			}
			set
			{
				if ((this._Security_Question != value))
				{
					this.OnSecurity_QuestionChanging(value);
					this.SendPropertyChanging();
					this._Security_Question = value;
					this.SendPropertyChanged("Security_Question");
					this.OnSecurity_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Answer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Security_Answer
		{
			get
			{
				return this._Security_Answer;
			}
			set
			{
				if ((this._Security_Answer != value))
				{
					this.OnSecurity_AnswerChanging(value);
					this.SendPropertyChanging();
					this._Security_Answer = value;
					this.SendPropertyChanged("Security_Answer");
					this.OnSecurity_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_Treatment", Storage="_Treatments", ThisKey="Nurse_ID", OtherKey="Nurse_ID")]
		public EntitySet<Treatment> Treatments
		{
			get
			{
				return this._Treatments;
			}
			set
			{
				this._Treatments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = this;
		}
		
		private void detach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Nurse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabIncharge")]
	public partial class LabIncharge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LabIncharge_ID;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _Email_ID;
		
		private string _Password;
		
		private string _Gender;
		
		private System.DateTime _DateOfBirth;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Security_Question;
		
		private string _Security_Answer;
		
		private bool _IsActive;
		
		private EntitySet<Report> _Reports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLabIncharge_IDChanging(int value);
    partial void OnLabIncharge_IDChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnEmail_IDChanging(string value);
    partial void OnEmail_IDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSecurity_QuestionChanging(string value);
    partial void OnSecurity_QuestionChanged();
    partial void OnSecurity_AnswerChanging(string value);
    partial void OnSecurity_AnswerChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public LabIncharge()
		{
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabIncharge_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LabIncharge_ID
		{
			get
			{
				return this._LabIncharge_ID;
			}
			set
			{
				if ((this._LabIncharge_ID != value))
				{
					this.OnLabIncharge_IDChanging(value);
					this.SendPropertyChanging();
					this._LabIncharge_ID = value;
					this.SendPropertyChanged("LabIncharge_ID");
					this.OnLabIncharge_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email_ID
		{
			get
			{
				return this._Email_ID;
			}
			set
			{
				if ((this._Email_ID != value))
				{
					this.OnEmail_IDChanging(value);
					this.SendPropertyChanging();
					this._Email_ID = value;
					this.SendPropertyChanged("Email_ID");
					this.OnEmail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Question", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Security_Question
		{
			get
			{
				return this._Security_Question;
			}
			set
			{
				if ((this._Security_Question != value))
				{
					this.OnSecurity_QuestionChanging(value);
					this.SendPropertyChanging();
					this._Security_Question = value;
					this.SendPropertyChanged("Security_Question");
					this.OnSecurity_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Answer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Security_Answer
		{
			get
			{
				return this._Security_Answer;
			}
			set
			{
				if ((this._Security_Answer != value))
				{
					this.OnSecurity_AnswerChanging(value);
					this.SendPropertyChanging();
					this._Security_Answer = value;
					this.SendPropertyChanged("Security_Answer");
					this.OnSecurity_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabIncharge_Report", Storage="_Reports", ThisKey="LabIncharge_ID", OtherKey="LabIncharge_ID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.LabIncharge = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.LabIncharge = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Patient_ID;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _Email_ID;
		
		private string _Password;
		
		private string _Gender;
		
		private System.DateTime _DateOfBirth;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Patient_Type;
		
		private string _Security_Question;
		
		private string _Security_Answer;
		
		private bool _IsActive;
		
		private EntitySet<Treatment> _Treatments;
		
		private EntitySet<Report> _Reports;
		
		private EntitySet<Treatment_Room> _Treatment_Rooms;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<TreatmentRoom_Record> _TreatmentRoom_Records;
		
		private EntitySet<Appointment> _Appointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatient_IDChanging(int value);
    partial void OnPatient_IDChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnEmail_IDChanging(string value);
    partial void OnEmail_IDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPatient_TypeChanging(string value);
    partial void OnPatient_TypeChanged();
    partial void OnSecurity_QuestionChanging(string value);
    partial void OnSecurity_QuestionChanged();
    partial void OnSecurity_AnswerChanging(string value);
    partial void OnSecurity_AnswerChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Patient()
		{
			this._Treatments = new EntitySet<Treatment>(new Action<Treatment>(this.attach_Treatments), new Action<Treatment>(this.detach_Treatments));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._Treatment_Rooms = new EntitySet<Treatment_Room>(new Action<Treatment_Room>(this.attach_Treatment_Rooms), new Action<Treatment_Room>(this.detach_Treatment_Rooms));
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._TreatmentRoom_Records = new EntitySet<TreatmentRoom_Record>(new Action<TreatmentRoom_Record>(this.attach_TreatmentRoom_Records), new Action<TreatmentRoom_Record>(this.detach_TreatmentRoom_Records));
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Patient_ID
		{
			get
			{
				return this._Patient_ID;
			}
			set
			{
				if ((this._Patient_ID != value))
				{
					this.OnPatient_IDChanging(value);
					this.SendPropertyChanging();
					this._Patient_ID = value;
					this.SendPropertyChanged("Patient_ID");
					this.OnPatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email_ID
		{
			get
			{
				return this._Email_ID;
			}
			set
			{
				if ((this._Email_ID != value))
				{
					this.OnEmail_IDChanging(value);
					this.SendPropertyChanging();
					this._Email_ID = value;
					this.SendPropertyChanged("Email_ID");
					this.OnEmail_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Patient_Type
		{
			get
			{
				return this._Patient_Type;
			}
			set
			{
				if ((this._Patient_Type != value))
				{
					this.OnPatient_TypeChanging(value);
					this.SendPropertyChanging();
					this._Patient_Type = value;
					this.SendPropertyChanged("Patient_Type");
					this.OnPatient_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Question", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Security_Question
		{
			get
			{
				return this._Security_Question;
			}
			set
			{
				if ((this._Security_Question != value))
				{
					this.OnSecurity_QuestionChanging(value);
					this.SendPropertyChanging();
					this._Security_Question = value;
					this.SendPropertyChanged("Security_Question");
					this.OnSecurity_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Answer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Security_Answer
		{
			get
			{
				return this._Security_Answer;
			}
			set
			{
				if ((this._Security_Answer != value))
				{
					this.OnSecurity_AnswerChanging(value);
					this.SendPropertyChanging();
					this._Security_Answer = value;
					this.SendPropertyChanged("Security_Answer");
					this.OnSecurity_AnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Treatment", Storage="_Treatments", ThisKey="Patient_ID", OtherKey="Patient_ID")]
		public EntitySet<Treatment> Treatments
		{
			get
			{
				return this._Treatments;
			}
			set
			{
				this._Treatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Report", Storage="_Reports", ThisKey="Patient_ID", OtherKey="Patient_ID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Treatment_Room", Storage="_Treatment_Rooms", ThisKey="Patient_ID", OtherKey="Patient_ID")]
		public EntitySet<Treatment_Room> Treatment_Rooms
		{
			get
			{
				return this._Treatment_Rooms;
			}
			set
			{
				this._Treatment_Rooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Account", Storage="_Accounts", ThisKey="Patient_ID", OtherKey="Patient_ID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Payment", Storage="_Payments", ThisKey="Patient_ID", OtherKey="Patient_ID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_TreatmentRoom_Record", Storage="_TreatmentRoom_Records", ThisKey="Patient_ID", OtherKey="Patient_ID")]
		public EntitySet<TreatmentRoom_Record> TreatmentRoom_Records
		{
			get
			{
				return this._TreatmentRoom_Records;
			}
			set
			{
				this._TreatmentRoom_Records.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Appointments", ThisKey="Patient_ID", OtherKey="Patient_ID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Treatment_Rooms(Treatment_Room entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Treatment_Rooms(Treatment_Room entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_TreatmentRoom_Records(TreatmentRoom_Record entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_TreatmentRoom_Records(TreatmentRoom_Record entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notifications")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Admin_ID;
		
		private int _UserRole_ID;
		
		private string _Notification1;
		
		private System.DateTime _Created_DateTime;
		
		private System.DateTime _Expires_DateTime;
		
		private EntityRef<Administrator> _Administrator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAdmin_IDChanging(int value);
    partial void OnAdmin_IDChanged();
    partial void OnUserRole_IDChanging(int value);
    partial void OnUserRole_IDChanged();
    partial void OnNotification1Changing(string value);
    partial void OnNotification1Changed();
    partial void OnCreated_DateTimeChanging(System.DateTime value);
    partial void OnCreated_DateTimeChanged();
    partial void OnExpires_DateTimeChanging(System.DateTime value);
    partial void OnExpires_DateTimeChanged();
    #endregion
		
		public Notification()
		{
			this._Administrator = default(EntityRef<Administrator>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_ID", DbType="Int NOT NULL")]
		public int Admin_ID
		{
			get
			{
				return this._Admin_ID;
			}
			set
			{
				if ((this._Admin_ID != value))
				{
					if (this._Administrator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdmin_IDChanging(value);
					this.SendPropertyChanging();
					this._Admin_ID = value;
					this.SendPropertyChanged("Admin_ID");
					this.OnAdmin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRole_ID", DbType="Int NOT NULL")]
		public int UserRole_ID
		{
			get
			{
				return this._UserRole_ID;
			}
			set
			{
				if ((this._UserRole_ID != value))
				{
					this.OnUserRole_IDChanging(value);
					this.SendPropertyChanging();
					this._UserRole_ID = value;
					this.SendPropertyChanged("UserRole_ID");
					this.OnUserRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Notification", Storage="_Notification1", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Notification1
		{
			get
			{
				return this._Notification1;
			}
			set
			{
				if ((this._Notification1 != value))
				{
					this.OnNotification1Changing(value);
					this.SendPropertyChanging();
					this._Notification1 = value;
					this.SendPropertyChanged("Notification1");
					this.OnNotification1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime Created_DateTime
		{
			get
			{
				return this._Created_DateTime;
			}
			set
			{
				if ((this._Created_DateTime != value))
				{
					this.OnCreated_DateTimeChanging(value);
					this.SendPropertyChanging();
					this._Created_DateTime = value;
					this.SendPropertyChanged("Created_DateTime");
					this.OnCreated_DateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expires_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime Expires_DateTime
		{
			get
			{
				return this._Expires_DateTime;
			}
			set
			{
				if ((this._Expires_DateTime != value))
				{
					this.OnExpires_DateTimeChanging(value);
					this.SendPropertyChanging();
					this._Expires_DateTime = value;
					this.SendPropertyChanged("Expires_DateTime");
					this.OnExpires_DateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Administrator_Notification", Storage="_Administrator", ThisKey="Admin_ID", OtherKey="Admin_ID", IsForeignKey=true)]
		public Administrator Administrator
		{
			get
			{
				return this._Administrator.Entity;
			}
			set
			{
				Administrator previousValue = this._Administrator.Entity;
				if (((previousValue != value) 
							|| (this._Administrator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Administrator.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._Administrator.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._Admin_ID = value.Admin_ID;
					}
					else
					{
						this._Admin_ID = default(int);
					}
					this.SendPropertyChanged("Administrator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Treatment")]
	public partial class Treatment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Treatment_ID;
		
		private int _Doctor_ID;
		
		private int _Patient_ID;
		
		private int _Nurse_ID;
		
		private string _Room_ID;
		
		private int _Prescription_ID;
		
		private System.DateTime _Date_time;
		
		private System.TimeSpan _Start_Time;
		
		private System.TimeSpan _End_Time;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Nurse> _Nurse;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Treatment_Room> _Treatment_Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTreatment_IDChanging(int value);
    partial void OnTreatment_IDChanged();
    partial void OnDoctor_IDChanging(int value);
    partial void OnDoctor_IDChanged();
    partial void OnPatient_IDChanging(int value);
    partial void OnPatient_IDChanged();
    partial void OnNurse_IDChanging(int value);
    partial void OnNurse_IDChanged();
    partial void OnRoom_IDChanging(string value);
    partial void OnRoom_IDChanged();
    partial void OnPrescription_IDChanging(int value);
    partial void OnPrescription_IDChanged();
    partial void OnDate_timeChanging(System.DateTime value);
    partial void OnDate_timeChanged();
    partial void OnStart_TimeChanging(System.TimeSpan value);
    partial void OnStart_TimeChanged();
    partial void OnEnd_TimeChanging(System.TimeSpan value);
    partial void OnEnd_TimeChanged();
    #endregion
		
		public Treatment()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Nurse = default(EntityRef<Nurse>);
			this._Patient = default(EntityRef<Patient>);
			this._Treatment_Room = default(EntityRef<Treatment_Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Treatment_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Treatment_ID
		{
			get
			{
				return this._Treatment_ID;
			}
			set
			{
				if ((this._Treatment_ID != value))
				{
					this.OnTreatment_IDChanging(value);
					this.SendPropertyChanging();
					this._Treatment_ID = value;
					this.SendPropertyChanged("Treatment_ID");
					this.OnTreatment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_ID", DbType="Int NOT NULL")]
		public int Doctor_ID
		{
			get
			{
				return this._Doctor_ID;
			}
			set
			{
				if ((this._Doctor_ID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctor_IDChanging(value);
					this.SendPropertyChanging();
					this._Doctor_ID = value;
					this.SendPropertyChanged("Doctor_ID");
					this.OnDoctor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="Int NOT NULL")]
		public int Patient_ID
		{
			get
			{
				return this._Patient_ID;
			}
			set
			{
				if ((this._Patient_ID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_IDChanging(value);
					this.SendPropertyChanging();
					this._Patient_ID = value;
					this.SendPropertyChanged("Patient_ID");
					this.OnPatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nurse_ID", DbType="Int NOT NULL")]
		public int Nurse_ID
		{
			get
			{
				return this._Nurse_ID;
			}
			set
			{
				if ((this._Nurse_ID != value))
				{
					if (this._Nurse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNurse_IDChanging(value);
					this.SendPropertyChanging();
					this._Nurse_ID = value;
					this.SendPropertyChanged("Nurse_ID");
					this.OnNurse_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Room_ID
		{
			get
			{
				return this._Room_ID;
			}
			set
			{
				if ((this._Room_ID != value))
				{
					if (this._Treatment_Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoom_IDChanging(value);
					this.SendPropertyChanging();
					this._Room_ID = value;
					this.SendPropertyChanged("Room_ID");
					this.OnRoom_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prescription_ID", DbType="Int NOT NULL")]
		public int Prescription_ID
		{
			get
			{
				return this._Prescription_ID;
			}
			set
			{
				if ((this._Prescription_ID != value))
				{
					this.OnPrescription_IDChanging(value);
					this.SendPropertyChanging();
					this._Prescription_ID = value;
					this.SendPropertyChanged("Prescription_ID");
					this.OnPrescription_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_time", DbType="DateTime NOT NULL")]
		public System.DateTime Date_time
		{
			get
			{
				return this._Date_time;
			}
			set
			{
				if ((this._Date_time != value))
				{
					this.OnDate_timeChanging(value);
					this.SendPropertyChanging();
					this._Date_time = value;
					this.SendPropertyChanged("Date_time");
					this.OnDate_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Start_Time
		{
			get
			{
				return this._Start_Time;
			}
			set
			{
				if ((this._Start_Time != value))
				{
					this.OnStart_TimeChanging(value);
					this.SendPropertyChanging();
					this._Start_Time = value;
					this.SendPropertyChanged("Start_Time");
					this.OnStart_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_Time", DbType="Time NOT NULL")]
		public System.TimeSpan End_Time
		{
			get
			{
				return this._End_Time;
			}
			set
			{
				if ((this._End_Time != value))
				{
					this.OnEnd_TimeChanging(value);
					this.SendPropertyChanging();
					this._End_Time = value;
					this.SendPropertyChanged("End_Time");
					this.OnEnd_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Treatment", Storage="_Doctor", ThisKey="Doctor_ID", OtherKey="Doctor_ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Treatments.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Treatments.Add(this);
						this._Doctor_ID = value.Doctor_ID;
					}
					else
					{
						this._Doctor_ID = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nurse_Treatment", Storage="_Nurse", ThisKey="Nurse_ID", OtherKey="Nurse_ID", IsForeignKey=true)]
		public Nurse Nurse
		{
			get
			{
				return this._Nurse.Entity;
			}
			set
			{
				Nurse previousValue = this._Nurse.Entity;
				if (((previousValue != value) 
							|| (this._Nurse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nurse.Entity = null;
						previousValue.Treatments.Remove(this);
					}
					this._Nurse.Entity = value;
					if ((value != null))
					{
						value.Treatments.Add(this);
						this._Nurse_ID = value.Nurse_ID;
					}
					else
					{
						this._Nurse_ID = default(int);
					}
					this.SendPropertyChanged("Nurse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Treatment", Storage="_Patient", ThisKey="Patient_ID", OtherKey="Patient_ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Treatments.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Treatments.Add(this);
						this._Patient_ID = value.Patient_ID;
					}
					else
					{
						this._Patient_ID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Treatment_Room_Treatment", Storage="_Treatment_Room", ThisKey="Room_ID", OtherKey="Room_ID", IsForeignKey=true)]
		public Treatment_Room Treatment_Room
		{
			get
			{
				return this._Treatment_Room.Entity;
			}
			set
			{
				Treatment_Room previousValue = this._Treatment_Room.Entity;
				if (((previousValue != value) 
							|| (this._Treatment_Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Treatment_Room.Entity = null;
						previousValue.Treatments.Remove(this);
					}
					this._Treatment_Room.Entity = value;
					if ((value != null))
					{
						value.Treatments.Add(this);
						this._Room_ID = value.Room_ID;
					}
					else
					{
						this._Room_ID = default(string);
					}
					this.SendPropertyChanged("Treatment_Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Report_ID;
		
		private int _Appointment_ID;
		
		private int _Patient_ID;
		
		private int _LabIncharge_ID;
		
		private string _Lab_Result;
		
		private System.TimeSpan _Report_Time;
		
		private System.DateTime _Report_Date;
		
		private EntityRef<LabIncharge> _LabIncharge;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReport_IDChanging(int value);
    partial void OnReport_IDChanged();
    partial void OnAppointment_IDChanging(int value);
    partial void OnAppointment_IDChanged();
    partial void OnPatient_IDChanging(int value);
    partial void OnPatient_IDChanged();
    partial void OnLabIncharge_IDChanging(int value);
    partial void OnLabIncharge_IDChanged();
    partial void OnLab_ResultChanging(string value);
    partial void OnLab_ResultChanged();
    partial void OnReport_TimeChanging(System.TimeSpan value);
    partial void OnReport_TimeChanged();
    partial void OnReport_DateChanging(System.DateTime value);
    partial void OnReport_DateChanged();
    #endregion
		
		public Report()
		{
			this._LabIncharge = default(EntityRef<LabIncharge>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Report_ID
		{
			get
			{
				return this._Report_ID;
			}
			set
			{
				if ((this._Report_ID != value))
				{
					this.OnReport_IDChanging(value);
					this.SendPropertyChanging();
					this._Report_ID = value;
					this.SendPropertyChanged("Report_ID");
					this.OnReport_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_ID", DbType="Int NOT NULL")]
		public int Appointment_ID
		{
			get
			{
				return this._Appointment_ID;
			}
			set
			{
				if ((this._Appointment_ID != value))
				{
					this.OnAppointment_IDChanging(value);
					this.SendPropertyChanging();
					this._Appointment_ID = value;
					this.SendPropertyChanged("Appointment_ID");
					this.OnAppointment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="Int NOT NULL")]
		public int Patient_ID
		{
			get
			{
				return this._Patient_ID;
			}
			set
			{
				if ((this._Patient_ID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_IDChanging(value);
					this.SendPropertyChanging();
					this._Patient_ID = value;
					this.SendPropertyChanged("Patient_ID");
					this.OnPatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabIncharge_ID", DbType="Int NOT NULL")]
		public int LabIncharge_ID
		{
			get
			{
				return this._LabIncharge_ID;
			}
			set
			{
				if ((this._LabIncharge_ID != value))
				{
					if (this._LabIncharge.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabIncharge_IDChanging(value);
					this.SendPropertyChanging();
					this._LabIncharge_ID = value;
					this.SendPropertyChanged("LabIncharge_ID");
					this.OnLabIncharge_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lab_Result", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Lab_Result
		{
			get
			{
				return this._Lab_Result;
			}
			set
			{
				if ((this._Lab_Result != value))
				{
					this.OnLab_ResultChanging(value);
					this.SendPropertyChanging();
					this._Lab_Result = value;
					this.SendPropertyChanged("Lab_Result");
					this.OnLab_ResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Report_Time
		{
			get
			{
				return this._Report_Time;
			}
			set
			{
				if ((this._Report_Time != value))
				{
					this.OnReport_TimeChanging(value);
					this.SendPropertyChanging();
					this._Report_Time = value;
					this.SendPropertyChanged("Report_Time");
					this.OnReport_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Report_Date", DbType="Date NOT NULL")]
		public System.DateTime Report_Date
		{
			get
			{
				return this._Report_Date;
			}
			set
			{
				if ((this._Report_Date != value))
				{
					this.OnReport_DateChanging(value);
					this.SendPropertyChanging();
					this._Report_Date = value;
					this.SendPropertyChanged("Report_Date");
					this.OnReport_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabIncharge_Report", Storage="_LabIncharge", ThisKey="LabIncharge_ID", OtherKey="LabIncharge_ID", IsForeignKey=true)]
		public LabIncharge LabIncharge
		{
			get
			{
				return this._LabIncharge.Entity;
			}
			set
			{
				LabIncharge previousValue = this._LabIncharge.Entity;
				if (((previousValue != value) 
							|| (this._LabIncharge.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabIncharge.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._LabIncharge.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._LabIncharge_ID = value.LabIncharge_ID;
					}
					else
					{
						this._LabIncharge_ID = default(int);
					}
					this.SendPropertyChanged("LabIncharge");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Report", Storage="_Patient", ThisKey="Patient_ID", OtherKey="Patient_ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._Patient_ID = value.Patient_ID;
					}
					else
					{
						this._Patient_ID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Treatment_Room")]
	public partial class Treatment_Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Room_ID;
		
		private int _Appointment_ID;
		
		private System.DateTime _DateOfJoin;
		
		private System.TimeSpan _Timings;
		
		private bool _IsBooked;
		
		private int _Patient_ID;
		
		private EntitySet<Treatment> _Treatments;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoom_IDChanging(string value);
    partial void OnRoom_IDChanged();
    partial void OnAppointment_IDChanging(int value);
    partial void OnAppointment_IDChanged();
    partial void OnDateOfJoinChanging(System.DateTime value);
    partial void OnDateOfJoinChanged();
    partial void OnTimingsChanging(System.TimeSpan value);
    partial void OnTimingsChanged();
    partial void OnIsBookedChanging(bool value);
    partial void OnIsBookedChanged();
    partial void OnPatient_IDChanging(int value);
    partial void OnPatient_IDChanged();
    #endregion
		
		public Treatment_Room()
		{
			this._Treatments = new EntitySet<Treatment>(new Action<Treatment>(this.attach_Treatments), new Action<Treatment>(this.detach_Treatments));
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Room_ID
		{
			get
			{
				return this._Room_ID;
			}
			set
			{
				if ((this._Room_ID != value))
				{
					this.OnRoom_IDChanging(value);
					this.SendPropertyChanging();
					this._Room_ID = value;
					this.SendPropertyChanged("Room_ID");
					this.OnRoom_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_ID", DbType="Int NOT NULL")]
		public int Appointment_ID
		{
			get
			{
				return this._Appointment_ID;
			}
			set
			{
				if ((this._Appointment_ID != value))
				{
					this.OnAppointment_IDChanging(value);
					this.SendPropertyChanging();
					this._Appointment_ID = value;
					this.SendPropertyChanged("Appointment_ID");
					this.OnAppointment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfJoin", DbType="Date NOT NULL")]
		public System.DateTime DateOfJoin
		{
			get
			{
				return this._DateOfJoin;
			}
			set
			{
				if ((this._DateOfJoin != value))
				{
					this.OnDateOfJoinChanging(value);
					this.SendPropertyChanging();
					this._DateOfJoin = value;
					this.SendPropertyChanged("DateOfJoin");
					this.OnDateOfJoinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timings", DbType="Time NOT NULL")]
		public System.TimeSpan Timings
		{
			get
			{
				return this._Timings;
			}
			set
			{
				if ((this._Timings != value))
				{
					this.OnTimingsChanging(value);
					this.SendPropertyChanging();
					this._Timings = value;
					this.SendPropertyChanged("Timings");
					this.OnTimingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBooked", DbType="Bit NOT NULL")]
		public bool IsBooked
		{
			get
			{
				return this._IsBooked;
			}
			set
			{
				if ((this._IsBooked != value))
				{
					this.OnIsBookedChanging(value);
					this.SendPropertyChanging();
					this._IsBooked = value;
					this.SendPropertyChanged("IsBooked");
					this.OnIsBookedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="Int NOT NULL")]
		public int Patient_ID
		{
			get
			{
				return this._Patient_ID;
			}
			set
			{
				if ((this._Patient_ID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_IDChanging(value);
					this.SendPropertyChanging();
					this._Patient_ID = value;
					this.SendPropertyChanged("Patient_ID");
					this.OnPatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Treatment_Room_Treatment", Storage="_Treatments", ThisKey="Room_ID", OtherKey="Room_ID")]
		public EntitySet<Treatment> Treatments
		{
			get
			{
				return this._Treatments;
			}
			set
			{
				this._Treatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Treatment_Room", Storage="_Patient", ThisKey="Patient_ID", OtherKey="Patient_ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Treatment_Rooms.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Treatment_Rooms.Add(this);
						this._Patient_ID = value.Patient_ID;
					}
					else
					{
						this._Patient_ID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Treatment_Room = this;
		}
		
		private void detach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Treatment_Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Bill_ID;
		
		private int _Appointment_ID;
		
		private int _Patient_ID;
		
		private int _Payment_ID;
		
		private decimal _Total_Amount;
		
		private System.Nullable<decimal> _Medicines_Fee;
		
		private System.Nullable<decimal> _Hospital_Fee;
		
		private System.Nullable<decimal> _Room_Fee;
		
		private decimal _Paid_Amount;
		
		private System.DateTime _Generated_Date_Time;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBill_IDChanging(int value);
    partial void OnBill_IDChanged();
    partial void OnAppointment_IDChanging(int value);
    partial void OnAppointment_IDChanged();
    partial void OnPatient_IDChanging(int value);
    partial void OnPatient_IDChanged();
    partial void OnPayment_IDChanging(int value);
    partial void OnPayment_IDChanged();
    partial void OnTotal_AmountChanging(decimal value);
    partial void OnTotal_AmountChanged();
    partial void OnMedicines_FeeChanging(System.Nullable<decimal> value);
    partial void OnMedicines_FeeChanged();
    partial void OnHospital_FeeChanging(System.Nullable<decimal> value);
    partial void OnHospital_FeeChanged();
    partial void OnRoom_FeeChanging(System.Nullable<decimal> value);
    partial void OnRoom_FeeChanged();
    partial void OnPaid_AmountChanging(decimal value);
    partial void OnPaid_AmountChanged();
    partial void OnGenerated_Date_TimeChanging(System.DateTime value);
    partial void OnGenerated_Date_TimeChanged();
    #endregion
		
		public Account()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Bill_ID
		{
			get
			{
				return this._Bill_ID;
			}
			set
			{
				if ((this._Bill_ID != value))
				{
					this.OnBill_IDChanging(value);
					this.SendPropertyChanging();
					this._Bill_ID = value;
					this.SendPropertyChanged("Bill_ID");
					this.OnBill_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_ID", DbType="Int NOT NULL")]
		public int Appointment_ID
		{
			get
			{
				return this._Appointment_ID;
			}
			set
			{
				if ((this._Appointment_ID != value))
				{
					this.OnAppointment_IDChanging(value);
					this.SendPropertyChanging();
					this._Appointment_ID = value;
					this.SendPropertyChanged("Appointment_ID");
					this.OnAppointment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="Int NOT NULL")]
		public int Patient_ID
		{
			get
			{
				return this._Patient_ID;
			}
			set
			{
				if ((this._Patient_ID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_IDChanging(value);
					this.SendPropertyChanging();
					this._Patient_ID = value;
					this.SendPropertyChanged("Patient_ID");
					this.OnPatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_ID", DbType="Int NOT NULL")]
		public int Payment_ID
		{
			get
			{
				return this._Payment_ID;
			}
			set
			{
				if ((this._Payment_ID != value))
				{
					this.OnPayment_IDChanging(value);
					this.SendPropertyChanging();
					this._Payment_ID = value;
					this.SendPropertyChanged("Payment_ID");
					this.OnPayment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Amount", DbType="Decimal(9,2) NOT NULL")]
		public decimal Total_Amount
		{
			get
			{
				return this._Total_Amount;
			}
			set
			{
				if ((this._Total_Amount != value))
				{
					this.OnTotal_AmountChanging(value);
					this.SendPropertyChanging();
					this._Total_Amount = value;
					this.SendPropertyChanged("Total_Amount");
					this.OnTotal_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicines_Fee", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> Medicines_Fee
		{
			get
			{
				return this._Medicines_Fee;
			}
			set
			{
				if ((this._Medicines_Fee != value))
				{
					this.OnMedicines_FeeChanging(value);
					this.SendPropertyChanging();
					this._Medicines_Fee = value;
					this.SendPropertyChanged("Medicines_Fee");
					this.OnMedicines_FeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_Fee", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> Hospital_Fee
		{
			get
			{
				return this._Hospital_Fee;
			}
			set
			{
				if ((this._Hospital_Fee != value))
				{
					this.OnHospital_FeeChanging(value);
					this.SendPropertyChanging();
					this._Hospital_Fee = value;
					this.SendPropertyChanged("Hospital_Fee");
					this.OnHospital_FeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_Fee", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> Room_Fee
		{
			get
			{
				return this._Room_Fee;
			}
			set
			{
				if ((this._Room_Fee != value))
				{
					this.OnRoom_FeeChanging(value);
					this.SendPropertyChanging();
					this._Room_Fee = value;
					this.SendPropertyChanged("Room_Fee");
					this.OnRoom_FeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid_Amount", DbType="Decimal(9,2) NOT NULL")]
		public decimal Paid_Amount
		{
			get
			{
				return this._Paid_Amount;
			}
			set
			{
				if ((this._Paid_Amount != value))
				{
					this.OnPaid_AmountChanging(value);
					this.SendPropertyChanging();
					this._Paid_Amount = value;
					this.SendPropertyChanged("Paid_Amount");
					this.OnPaid_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Generated_Date_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Generated_Date_Time
		{
			get
			{
				return this._Generated_Date_Time;
			}
			set
			{
				if ((this._Generated_Date_Time != value))
				{
					this.OnGenerated_Date_TimeChanging(value);
					this.SendPropertyChanging();
					this._Generated_Date_Time = value;
					this.SendPropertyChanged("Generated_Date_Time");
					this.OnGenerated_Date_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Account", Storage="_Patient", ThisKey="Patient_ID", OtherKey="Patient_ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._Patient_ID = value.Patient_ID;
					}
					else
					{
						this._Patient_ID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Payment_ID;
		
		private int _Patient_ID;
		
		private int _Bill_ID;
		
		private decimal _Total_Amount;
		
		private decimal _Paid_Amount;
		
		private decimal _Medicines_Fee;
		
		private decimal _Hospital_Fee;
		
		private System.Nullable<decimal> _Room_Fee;
		
		private System.DateTime _Date_Time;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayment_IDChanging(int value);
    partial void OnPayment_IDChanged();
    partial void OnPatient_IDChanging(int value);
    partial void OnPatient_IDChanged();
    partial void OnBill_IDChanging(int value);
    partial void OnBill_IDChanged();
    partial void OnTotal_AmountChanging(decimal value);
    partial void OnTotal_AmountChanged();
    partial void OnPaid_AmountChanging(decimal value);
    partial void OnPaid_AmountChanged();
    partial void OnMedicines_FeeChanging(decimal value);
    partial void OnMedicines_FeeChanged();
    partial void OnHospital_FeeChanging(decimal value);
    partial void OnHospital_FeeChanged();
    partial void OnRoom_FeeChanging(System.Nullable<decimal> value);
    partial void OnRoom_FeeChanged();
    partial void OnDate_TimeChanging(System.DateTime value);
    partial void OnDate_TimeChanged();
    #endregion
		
		public Payment()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Payment_ID
		{
			get
			{
				return this._Payment_ID;
			}
			set
			{
				if ((this._Payment_ID != value))
				{
					this.OnPayment_IDChanging(value);
					this.SendPropertyChanging();
					this._Payment_ID = value;
					this.SendPropertyChanged("Payment_ID");
					this.OnPayment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="Int NOT NULL")]
		public int Patient_ID
		{
			get
			{
				return this._Patient_ID;
			}
			set
			{
				if ((this._Patient_ID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_IDChanging(value);
					this.SendPropertyChanging();
					this._Patient_ID = value;
					this.SendPropertyChanged("Patient_ID");
					this.OnPatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill_ID", DbType="Int NOT NULL")]
		public int Bill_ID
		{
			get
			{
				return this._Bill_ID;
			}
			set
			{
				if ((this._Bill_ID != value))
				{
					this.OnBill_IDChanging(value);
					this.SendPropertyChanging();
					this._Bill_ID = value;
					this.SendPropertyChanged("Bill_ID");
					this.OnBill_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Amount", DbType="Decimal(9,2) NOT NULL")]
		public decimal Total_Amount
		{
			get
			{
				return this._Total_Amount;
			}
			set
			{
				if ((this._Total_Amount != value))
				{
					this.OnTotal_AmountChanging(value);
					this.SendPropertyChanging();
					this._Total_Amount = value;
					this.SendPropertyChanged("Total_Amount");
					this.OnTotal_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid_Amount", DbType="Decimal(9,2) NOT NULL")]
		public decimal Paid_Amount
		{
			get
			{
				return this._Paid_Amount;
			}
			set
			{
				if ((this._Paid_Amount != value))
				{
					this.OnPaid_AmountChanging(value);
					this.SendPropertyChanging();
					this._Paid_Amount = value;
					this.SendPropertyChanged("Paid_Amount");
					this.OnPaid_AmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medicines_Fee", DbType="Decimal(9,2) NOT NULL")]
		public decimal Medicines_Fee
		{
			get
			{
				return this._Medicines_Fee;
			}
			set
			{
				if ((this._Medicines_Fee != value))
				{
					this.OnMedicines_FeeChanging(value);
					this.SendPropertyChanging();
					this._Medicines_Fee = value;
					this.SendPropertyChanged("Medicines_Fee");
					this.OnMedicines_FeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_Fee", DbType="Decimal(9,2) NOT NULL")]
		public decimal Hospital_Fee
		{
			get
			{
				return this._Hospital_Fee;
			}
			set
			{
				if ((this._Hospital_Fee != value))
				{
					this.OnHospital_FeeChanging(value);
					this.SendPropertyChanging();
					this._Hospital_Fee = value;
					this.SendPropertyChanged("Hospital_Fee");
					this.OnHospital_FeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_Fee", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> Room_Fee
		{
			get
			{
				return this._Room_Fee;
			}
			set
			{
				if ((this._Room_Fee != value))
				{
					this.OnRoom_FeeChanging(value);
					this.SendPropertyChanging();
					this._Room_Fee = value;
					this.SendPropertyChanged("Room_Fee");
					this.OnRoom_FeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Date_Time
		{
			get
			{
				return this._Date_Time;
			}
			set
			{
				if ((this._Date_Time != value))
				{
					this.OnDate_TimeChanging(value);
					this.SendPropertyChanging();
					this._Date_Time = value;
					this.SendPropertyChanged("Date_Time");
					this.OnDate_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Payment", Storage="_Patient", ThisKey="Patient_ID", OtherKey="Patient_ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._Patient_ID = value.Patient_ID;
					}
					else
					{
						this._Patient_ID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TreatmentRoom_Records")]
	public partial class TreatmentRoom_Record : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Record_ID;
		
		private string _Room_ID;
		
		private int _Appointment_ID;
		
		private System.DateTime _DateOfJoin;
		
		private System.TimeSpan _Timings;
		
		private bool _IsBooked;
		
		private int _Patient_ID;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecord_IDChanging(int value);
    partial void OnRecord_IDChanged();
    partial void OnRoom_IDChanging(string value);
    partial void OnRoom_IDChanged();
    partial void OnAppointment_IDChanging(int value);
    partial void OnAppointment_IDChanged();
    partial void OnDateOfJoinChanging(System.DateTime value);
    partial void OnDateOfJoinChanged();
    partial void OnTimingsChanging(System.TimeSpan value);
    partial void OnTimingsChanged();
    partial void OnIsBookedChanging(bool value);
    partial void OnIsBookedChanged();
    partial void OnPatient_IDChanging(int value);
    partial void OnPatient_IDChanged();
    #endregion
		
		public TreatmentRoom_Record()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Record_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Record_ID
		{
			get
			{
				return this._Record_ID;
			}
			set
			{
				if ((this._Record_ID != value))
				{
					this.OnRecord_IDChanging(value);
					this.SendPropertyChanging();
					this._Record_ID = value;
					this.SendPropertyChanged("Record_ID");
					this.OnRecord_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Room_ID
		{
			get
			{
				return this._Room_ID;
			}
			set
			{
				if ((this._Room_ID != value))
				{
					this.OnRoom_IDChanging(value);
					this.SendPropertyChanging();
					this._Room_ID = value;
					this.SendPropertyChanged("Room_ID");
					this.OnRoom_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_ID", DbType="Int NOT NULL")]
		public int Appointment_ID
		{
			get
			{
				return this._Appointment_ID;
			}
			set
			{
				if ((this._Appointment_ID != value))
				{
					this.OnAppointment_IDChanging(value);
					this.SendPropertyChanging();
					this._Appointment_ID = value;
					this.SendPropertyChanged("Appointment_ID");
					this.OnAppointment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfJoin", DbType="Date NOT NULL")]
		public System.DateTime DateOfJoin
		{
			get
			{
				return this._DateOfJoin;
			}
			set
			{
				if ((this._DateOfJoin != value))
				{
					this.OnDateOfJoinChanging(value);
					this.SendPropertyChanging();
					this._DateOfJoin = value;
					this.SendPropertyChanged("DateOfJoin");
					this.OnDateOfJoinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timings", DbType="Time NOT NULL")]
		public System.TimeSpan Timings
		{
			get
			{
				return this._Timings;
			}
			set
			{
				if ((this._Timings != value))
				{
					this.OnTimingsChanging(value);
					this.SendPropertyChanging();
					this._Timings = value;
					this.SendPropertyChanged("Timings");
					this.OnTimingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBooked", DbType="Bit NOT NULL")]
		public bool IsBooked
		{
			get
			{
				return this._IsBooked;
			}
			set
			{
				if ((this._IsBooked != value))
				{
					this.OnIsBookedChanging(value);
					this.SendPropertyChanging();
					this._IsBooked = value;
					this.SendPropertyChanged("IsBooked");
					this.OnIsBookedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="Int NOT NULL")]
		public int Patient_ID
		{
			get
			{
				return this._Patient_ID;
			}
			set
			{
				if ((this._Patient_ID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_IDChanging(value);
					this.SendPropertyChanging();
					this._Patient_ID = value;
					this.SendPropertyChanged("Patient_ID");
					this.OnPatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_TreatmentRoom_Record", Storage="_Patient", ThisKey="Patient_ID", OtherKey="Patient_ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.TreatmentRoom_Records.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.TreatmentRoom_Records.Add(this);
						this._Patient_ID = value.Patient_ID;
					}
					else
					{
						this._Patient_ID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Appointment_ID;
		
		private int _Doctor_ID;
		
		private int _Patient_ID;
		
		private System.TimeSpan _Timings;
		
		private System.DateTime _Appointment_Date;
		
		private System.DateTime _Date_Time;
		
		private bool _RequestedReport;
		
		private string _RequestedReportNotes;
		
		private bool _Cancelled;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointment_IDChanging(int value);
    partial void OnAppointment_IDChanged();
    partial void OnDoctor_IDChanging(int value);
    partial void OnDoctor_IDChanged();
    partial void OnPatient_IDChanging(int value);
    partial void OnPatient_IDChanged();
    partial void OnTimingsChanging(System.TimeSpan value);
    partial void OnTimingsChanged();
    partial void OnAppointment_DateChanging(System.DateTime value);
    partial void OnAppointment_DateChanged();
    partial void OnDate_TimeChanging(System.DateTime value);
    partial void OnDate_TimeChanged();
    partial void OnRequestedReportChanging(bool value);
    partial void OnRequestedReportChanged();
    partial void OnRequestedReportNotesChanging(string value);
    partial void OnRequestedReportNotesChanged();
    partial void OnCancelledChanging(bool value);
    partial void OnCancelledChanged();
    #endregion
		
		public Appointment()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Appointment_ID
		{
			get
			{
				return this._Appointment_ID;
			}
			set
			{
				if ((this._Appointment_ID != value))
				{
					this.OnAppointment_IDChanging(value);
					this.SendPropertyChanging();
					this._Appointment_ID = value;
					this.SendPropertyChanged("Appointment_ID");
					this.OnAppointment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_ID", DbType="Int NOT NULL")]
		public int Doctor_ID
		{
			get
			{
				return this._Doctor_ID;
			}
			set
			{
				if ((this._Doctor_ID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctor_IDChanging(value);
					this.SendPropertyChanging();
					this._Doctor_ID = value;
					this.SendPropertyChanged("Doctor_ID");
					this.OnDoctor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="Int NOT NULL")]
		public int Patient_ID
		{
			get
			{
				return this._Patient_ID;
			}
			set
			{
				if ((this._Patient_ID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_IDChanging(value);
					this.SendPropertyChanging();
					this._Patient_ID = value;
					this.SendPropertyChanged("Patient_ID");
					this.OnPatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timings", DbType="Time NOT NULL")]
		public System.TimeSpan Timings
		{
			get
			{
				return this._Timings;
			}
			set
			{
				if ((this._Timings != value))
				{
					this.OnTimingsChanging(value);
					this.SendPropertyChanging();
					this._Timings = value;
					this.SendPropertyChanged("Timings");
					this.OnTimingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Appointment_Date
		{
			get
			{
				return this._Appointment_Date;
			}
			set
			{
				if ((this._Appointment_Date != value))
				{
					this.OnAppointment_DateChanging(value);
					this.SendPropertyChanging();
					this._Appointment_Date = value;
					this.SendPropertyChanged("Appointment_Date");
					this.OnAppointment_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Date_Time
		{
			get
			{
				return this._Date_Time;
			}
			set
			{
				if ((this._Date_Time != value))
				{
					this.OnDate_TimeChanging(value);
					this.SendPropertyChanging();
					this._Date_Time = value;
					this.SendPropertyChanged("Date_Time");
					this.OnDate_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedReport", DbType="Bit NOT NULL")]
		public bool RequestedReport
		{
			get
			{
				return this._RequestedReport;
			}
			set
			{
				if ((this._RequestedReport != value))
				{
					this.OnRequestedReportChanging(value);
					this.SendPropertyChanging();
					this._RequestedReport = value;
					this.SendPropertyChanged("RequestedReport");
					this.OnRequestedReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedReportNotes", DbType="VarChar(MAX)")]
		public string RequestedReportNotes
		{
			get
			{
				return this._RequestedReportNotes;
			}
			set
			{
				if ((this._RequestedReportNotes != value))
				{
					this.OnRequestedReportNotesChanging(value);
					this.SendPropertyChanging();
					this._RequestedReportNotes = value;
					this.SendPropertyChanged("RequestedReportNotes");
					this.OnRequestedReportNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cancelled", DbType="Bit NOT NULL")]
		public bool Cancelled
		{
			get
			{
				return this._Cancelled;
			}
			set
			{
				if ((this._Cancelled != value))
				{
					this.OnCancelledChanging(value);
					this.SendPropertyChanging();
					this._Cancelled = value;
					this.SendPropertyChanged("Cancelled");
					this.OnCancelledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Appointment", Storage="_Doctor", ThisKey="Doctor_ID", OtherKey="Doctor_ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._Doctor_ID = value.Doctor_ID;
					}
					else
					{
						this._Doctor_ID = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Patient", ThisKey="Patient_ID", OtherKey="Patient_ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._Patient_ID = value.Patient_ID;
					}
					else
					{
						this._Patient_ID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
